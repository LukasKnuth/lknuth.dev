<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Writings</title><link>https://lknuth.dev/writings/</link><generator>Hugo</generator><language>en-us</language><managingEditor>Lukas Knuth</managingEditor><copyright>Content licensed under the Creative Commons Attribution-ShareAlike 4.0 International License. All source code is licensed MIT</copyright><lastBuildDate>Wed, 04 Jun 2025 11:22:51 +0200</lastBuildDate><atom:link href="https://lknuth.dev/writings/index.xml" rel="self" type="application/rss+xml"/><item><title>Persistent storage is for cowards</title><link>https://lknuth.dev/writings/persistent_storage_cowards/</link><pubDate>Fri, 30 May 2025 16:20:00 +0200</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/persistent_storage_cowards/</guid><description>&lt;p>About a year ago, I rebuild my home server.
It still runs on Kubernetes, but I moved away from traditional tooling associated with it.
The goal was simplicity; and I made some opinionated choices to achieve it.
For example, I deploy everything using Terraform with the Kubernetes provider - no more YAML!&lt;/p>
&lt;p>For hardware, I just have a single Raspberry Pi 4.
There is no external storage attached to it, so everything is on an SD Card that could be corrupted at any point.
I would like very much for my application data to not be lost when that happens though.&lt;/p></description></item><item><title>Java in the Browser</title><link>https://lknuth.dev/writings/java_in_browser/</link><pubDate>Mon, 31 Mar 2025 18:40:09 +0200</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/java_in_browser/</guid><description>&lt;p>Like most aspiring software engineers, I wanted to program games.
Back in 2012 I had been learning to program for two years.
I was basically a senior developer.
Java was the only programming language that I knew.
And because I fancied myself a capable engineer, I wanted to build the game engine myself, from scratch.&lt;/p>
&lt;p>So I stole somebody else&amp;rsquo;s game - I read through the (excellent) &lt;a href="https://pacman.holenet.info/" rel="external">PAC-MAN Dossier&lt;/a>.
The document has &lt;em>everything&lt;/em> you need to build your own version of the game.
It details the basic game rules, the point system and how the ghost AI works.
And it&amp;rsquo;s also not too technical, so you get to make the interesting decisions for yourself.&lt;/p>
&lt;p>It took me about two months to get the game into a state that I was satisfied with.
And then I left it alone for 13 years.
Until I found the repository again a few weeks ago.&lt;/p></description></item><item><title>On the production Database</title><link>https://lknuth.dev/writings/on_production_database/</link><pubDate>Thu, 27 Feb 2025 14:15:56 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/on_production_database/</guid><description>&lt;p>Eventually, you&amp;rsquo;ll connect to the production instance of your relational database.
Perhaps just to check something.
Or to make a &lt;em>small&lt;/em> change manually.&lt;/p></description></item><item><title>Website Remaster</title><link>https://lknuth.dev/writings/website_remaster/</link><pubDate>Fri, 10 Jan 2025 13:20:00 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/website_remaster/</guid><description>&lt;p>When I set up this version of the website I opted for a ready to use theme instead of making my own.
Then, some time ago, I started simplifying everything I could about my setup.
I value when things are easy to understand, maintain and extend.&lt;/p>
&lt;p>The new year was a great excuse to redo the perfectly good website in Tailwind CSS.
It&amp;rsquo;s everywhere in web development now, and I wanted to get more familiar.&lt;/p></description></item><item><title>Three Levels of Git Aliases</title><link>https://lknuth.dev/writings/three_levels_git_alias/</link><pubDate>Fri, 29 Nov 2024 17:08:30 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/three_levels_git_alias/</guid><description>&lt;p>&lt;a href="https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases" rel="external">Chapter 2.7 of the Git Book&lt;/a> is called &amp;ldquo;Git Aliases&amp;rdquo;. Tucked away in it is probably the most powerful built-in feature to customize git to your own liking.&lt;/p>
&lt;p>Aliases allow you to define a shorthand for a git sub-command - including its options - that you commonly type in your workflow.
We&amp;rsquo;ll illustrate three increasingly powerful levels of customization enabled by aliases using a simple example:&lt;/p></description></item><item><title>Zero to EPUB</title><link>https://lknuth.dev/writings/zero_to_epub/</link><pubDate>Fri, 03 May 2024 14:00:00 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/zero_to_epub/</guid><description>&lt;p>I like Low Tech Magazine.
Not only is their website solar-powered and only available when the weather is good, they provide an interesting viewpoint on technology as a whole.&lt;/p>
&lt;p>Recently, they created a thematic collection of articles called &lt;a href="https://solar.lowtechmagazine.com/2023/08/thematic-books-series/" rel="external">&amp;ldquo;How to Build a Low-tech Internet?&amp;rdquo;&lt;/a>.
It&amp;rsquo;s sold as a hard-copy book, but not as an EPUB.
Since I&amp;rsquo;m almost exclusively reading my books digitally these days - and the articles are all available on their website, I thought I&amp;rsquo;d just create an EPUB myself.&lt;/p>
&lt;p>The irony of this is not lost on me.&lt;/p></description></item><item><title>Design a Technical Interview</title><link>https://lknuth.dev/writings/design_technical_interview/</link><pubDate>Thu, 28 Dec 2023 14:00:00 +0200</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/design_technical_interview/</guid><description>&lt;p>Last year, the company I work for was looking to hire a Backend Engineer.
We wanted somebody who was a senior or on their way to becoming one.&lt;/p>
&lt;p>The Backend Squad was tasked with designing an interview to help decide who to hire based on technical merit.
Above all, we wanted our interview to favor candidates that are good fits.
Now, after working with our new hire for about 11 months, we know that we succeeded.
This is how we went about designing the interview.&lt;/p></description></item><item><title>Work in an efficient team</title><link>https://lknuth.dev/writings/efficient_team/</link><pubDate>Fri, 02 Jun 2023 15:10:00 +0200</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/efficient_team/</guid><description>&lt;p>Some years ago I worked in a team of software developers which I still consider the most productive team I have ever been a part of. We built a large system for our internal users with a dozen product team members and had a turnaround time from &lt;em>idea&lt;/em> to &lt;em>implementation&lt;/em> of about three weeks. This is how we did it.&lt;/p></description></item><item><title>Delightfully Boring</title><link>https://lknuth.dev/writings/delightfully_boring/</link><pubDate>Mon, 15 May 2023 13:30:00 +0200</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/delightfully_boring/</guid><description>&lt;p>When I joined 7Mind a year ago, I was hired partially to help migrate the existing system away from micro-services towards a new monolithic Elixir application.
This decision was made before I had joined, but having worked in a company that went very all-in on micro-services before, I welcomed it.&lt;/p>
&lt;p>In this article we&amp;rsquo;ll look at the value that micro-services bring to an organization and how at 7Mind we capture the same value with a single modulithic application.&lt;/p></description></item><item><title>Dangerously Typed</title><link>https://lknuth.dev/writings/dangerously_typed/</link><pubDate>Sat, 07 Jan 2017 16:05:00 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/dangerously_typed/</guid><description>&lt;p>At work, I&amp;rsquo;m currently building a new Node.js Application. I opted to use Node, because the application is highly parallel and while I could have built it in Java, Node already does all the hard things that come with building multithreaded Applications.&lt;/p>
&lt;p>For my language of choice, I looked to &lt;a href="https://www.typescriptlang.org/" rel="external">TypeScript&lt;/a>, because it adds some compile-time type-safety to JavaScript. For the most part, TypeScript has been helping me to write clean code that I can trust when the compiler gives the &amp;ldquo;all clear&amp;rdquo;. But recently, while hunting an unrelated bug, I stumbled upon something dangerous.&lt;/p></description></item><item><title>TTS and Usability</title><link>https://lknuth.dev/writings/tts_and_usability/</link><pubDate>Fri, 13 Jun 2014 16:02:43 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/tts_and_usability/</guid><description>&lt;p>There are limited yet very legit use-cases for Text to Speech engines in your application.&lt;/p>
&lt;p>An example for such a case is an application that has focus and is doing its thing, but doesn&amp;rsquo;t require physical interaction with the device.
These applications might still want to update the user regularly, without touching or looking at the device.
An example of such an application is a Navigation App.&lt;/p>
&lt;p>Let&amp;rsquo;s see how TTS can be used responsibly.&lt;/p></description></item><item><title>Generating Qrcodes With Zxing</title><link>https://lknuth.dev/writings/generating_qrcodes_with_zxing/</link><pubDate>Sun, 25 Aug 2013 16:00:11 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/generating_qrcodes_with_zxing/</guid><description>&lt;p>When it comes to reading QR-codes, most Android applications use the &lt;a href="https://github.com/zxing/zxing" rel="external">ZXing library&lt;/a>. It&amp;rsquo;s capabilities and ease of use when &lt;em>reading&lt;/em> QR-Codes is already known, but ZXing can also &lt;em>generate&lt;/em> QR-Codes.&lt;/p>
&lt;p>Sadly, a lack of documentation makes it pretty hard to dive into this topic, so this article aims to provide a simple starting point.&lt;/p></description></item><item><title>Making GNOME Shell Extensions</title><link>https://lknuth.dev/writings/making_gnome_shell_extensions/</link><pubDate>Sat, 09 Feb 2013 15:57:38 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/making_gnome_shell_extensions/</guid><description>&lt;p>Getting into GNOME Shell extension development is hard and involves a lot of source-code reading.&lt;/p>
&lt;p>This post collects resources that helped me get into it as well as general advice. It aims to be a jump-off point, rather than a guide.&lt;/p></description></item><item><title>Audio Visual Environment</title><link>https://lknuth.dev/writings/audio_visual_environment/</link><pubDate>Tue, 06 Nov 2012 15:56:34 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/audio_visual_environment/</guid><description>&lt;p>I&amp;rsquo;m a highly audio-visual human being. I like to listen to music anywhere I go, at any given time, largely for the sake of being entertained, but also because I can&amp;rsquo;t (and don&amp;rsquo;t want to) listen to other people talking. I live in the city and don&amp;rsquo;t own a car myself, so I&amp;rsquo;m taking the train or bus almost everywhere.&lt;/p>
&lt;p>But in this article, I want to focus on &amp;ldquo;coding sounds&amp;rdquo;, the audio visual environment i create for myself to help me stay focused for long periods of time.&lt;/p></description></item><item><title>Working unbuffered Streams</title><link>https://lknuth.dev/writings/working_unbuffered_streams/</link><pubDate>Mon, 15 Oct 2012 15:54:32 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/working_unbuffered_streams/</guid><description>&lt;p>When working with I/O in Java, you can normally choose from a variety of &lt;code>Stream&lt;/code> and &lt;code>Reader&lt;/code> or &lt;code>Writer&lt;/code> classes to handle all the &amp;ldquo;dirty&amp;rdquo; work for you. But what happens under the hood? And why is this stuff so error-prone?&lt;/p></description></item><item><title>UDP Multicast on Android</title><link>https://lknuth.dev/writings/udp_multicast_on_android/</link><pubDate>Tue, 04 Sep 2012 15:51:15 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/udp_multicast_on_android/</guid><description>&lt;p>I started working on a small inventory system, that keeps track of all the things I buy. To enter new items quickly into the system, I needed a barcode-scanner to scan new articles, transfer them to my computer and allow me to (for example) paste them into a focused input-field.&lt;/p>
&lt;p>I wrote a small Android application, that uses &lt;a href="https://github.com/zxing/zxing" rel="external">zxing&lt;/a> to scan the barcodes and a simple multicasted UDP network connection to broadcast the contents of the code to all listening network devices. This way, I don&amp;rsquo;t need to enter any IP addresses or host-names in the app to reach the listening server application on my computer. The &lt;code>MulticastSocket&lt;/code> of the java standard library seemed perfect for this purpose.&lt;/p></description></item><item><title>Android targeting system</title><link>https://lknuth.dev/writings/android_targeting_system/</link><pubDate>Thu, 02 Aug 2012 15:48:26 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/android_targeting_system/</guid><description>&lt;p>I recently started supporting API Level 9 in my current project, which brought a problem with the ActionBar along. I had used it extensively in development (which was targeting post-Honeycomb devices), but it&amp;rsquo;s only available on API Level 11 and later.&lt;/p>
&lt;p>Long story short, I started using &lt;a href="http://actionbarsherlock.com/" rel="external">ActionBarSherlock&lt;/a> to get the ActionBar working on all devices and discovered an interesting fact about the Android building system and it&amp;rsquo;s targeting mechanism.&lt;/p></description></item><item><title>Saying more than nothing</title><link>https://lknuth.dev/writings/saying_more_than_nothing/</link><pubDate>Mon, 23 Jul 2012 22:00:00 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/saying_more_than_nothing/</guid><description>&lt;p>As I was reading around on StackOverflow, digging through other peoples source code, I spotted multiple methods returning &lt;code>null&lt;/code> in a variety of circumstances. I also found rather imaginative ways to handle null-values.&lt;/p>
&lt;p>Although there is nothing wrong with &lt;code>null&lt;/code>, the concept of null-pointers seems to be somewhat misunderstood. Let&amp;rsquo;s change that.&lt;/p>
&lt;!--note-->
&lt;h2 id="what-are-null-pointers">&lt;a href="#what-are-null-pointers">What are null-pointers?&lt;/a>&lt;/h2>
&lt;p>&lt;a href="http://en.wikipedia.org/wiki/Null_pointer#Null_pointer" rel="external">Wikipedia&lt;/a> has the following to say:&lt;/p>



 &lt;blockquote>
 &lt;p>A null pointer has a value reserved for indicating that &lt;strong>the pointer does not refer to a valid object.&lt;/strong>&lt;/p></description></item><item><title>Rules of Immutability</title><link>https://lknuth.dev/writings/rules_of_immutability/</link><pubDate>Tue, 17 Jul 2012 22:00:00 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/rules_of_immutability/</guid><description>&lt;p>In a perfect world, every &lt;em>value container&lt;/em> (an object that only holds multiple fields of data and defines methods for access) is immutable. Immutability should always be a design-goal, especially, when creating a library or API.&lt;/p>
&lt;p>In this article, I&amp;rsquo;m going to explain what immutable objects are, why they are cool and what stumbling blocks you should watch out for.&lt;/p></description></item><item><title>Catching Practice</title><link>https://lknuth.dev/writings/catching_practice/</link><pubDate>Fri, 06 Jul 2012 20:40:00 +0100</pubDate><author>Lukas Knuth</author><guid>https://lknuth.dev/writings/catching_practice/</guid><description>&lt;p>I recently answered a question on StackOverflow, asking if catching an &lt;code>Error&lt;/code> would be reasonable in a particular case. The original question and my answer can be found &lt;a href="http://stackoverflow.com/q/11017304/717341" rel="external">here&lt;/a>, however I felt that my answer could be extended with a more general discussion of the implications and additional examples.&lt;/p></description></item></channel></rss>